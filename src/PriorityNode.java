/** * ?? * * @author Yimin Xu 250876566 CS1027 * @author  * @version */public class PriorityNode<E>{   private double priority;   private PriorityNode<E> next;   private E element;      /**    * Create a priority node without any element or priority    */   public PriorityNode()   {	   priority = 0;	   next = null;	   element = null;   }      /**    * Create a priority node without priority    * @param elem The element of the node    */   public PriorityNode(E elem)   {	   priority = 999999;	   next = null;	   element = elem;   }      /**    * Create a priority node with priority    * @param elem The element of the node     * @param p The priority of the node (The smaller the priority is, the sooner it is dequeued)    */   public PriorityNode(E elem, double p)   {	   priority = p;	   next = null;	   element = elem;   }      /**    * return the next node    * @return the next node     */   public PriorityNode<E> getNext()   {	   return next;   }      /**    * Set the next node    * @param newNext Next node    */   public void setNext(PriorityNode<E> newNext)   {	   next = newNext;   }      /**    * return the element of the current node     * @return the element     */   public E getElement()   {	   return element;   }      /**    * Set the element of the current node    * @param newElem the new element to be set    */   public void setElement(E newElem)   {	  element = newElem;   }      /**    * Set the priority of the current node    * @param newPrio the new priority    */   public void setPriority(double newPrio)   {	   priority = newPrio;   }      /**    * return the priority of the current node    * @return the priority of the current node    */   public double getPriority()   {	   return priority;   }}